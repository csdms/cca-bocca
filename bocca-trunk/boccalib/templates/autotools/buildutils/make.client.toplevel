# ---- Edit below this line only if you know what you are doing ----

CLIENT_BUILD=1

ifndef CLIENT_TOP_DIR
    $(error The top-level client build requires the CLIENT_TOP_DIR variable (the directory containing client subdirectories).)
endif

ifndef MYDIR
    MYDIR := $(CLIENT_TOP_DIR)
endif

#-----------------------------------------------------------------------------------------
# User-specified top-level client directory variables (for all clients in this directory)
ifeq ($(shell if test -f $(CLIENT_TOP_DIR)/make.vars.user ; then echo "0"; else echo "1"; fi),0)
    include $(CLIENT_TOP_DIR)/make.vars.user
endif

#-----------------------------------------------------------------------------------------
# User-specified client-specific rules
ifeq ($(shell if test -f make.vars.user ; then echo "0"; else echo "1"; fi),0)
    include make.vars.user
endif

# The RELATIVE_TOP is from the directory that contains the actual sources to be compiled
ifndef RELATIVE_TOP
	RELATIVE_TOP=../../..
endif

ifndef SIDL_SYMBOLS
    SIDL_SYMBOLS = $(INTERFACES) $(PORTS)
endif

ifndef SIDL_DIR
    SIDL_DIR = $(CLIENT_TOP_DIR)/sidl
endif

ifeq ($(SIDL_FILES),)
ifneq ($(SIDL_SYMBOLS),)
    SIDL_FILES = $(foreach sym,$(SIDL_SYMBOLS),$(addprefix $(SIDL_DIR)/,$(addsuffix .sidl,$(sym))))
else
    SIDL_FILES = $(wildcard sidl/*.sidl)
endif
endif

ifeq ($(SIDL_SYMBOLS),)
	SIDL_SYMBOLS = $(basename $(notdir ${SIDL_FILES} ) )
endif

SIDL_SYMBOLS_TARGETS = $(addprefix ., $(SIDL_SYMBOLS))
ALL_SYMBOLS = $(SIDL_SYMBOLS) $(EXTERNAL_XML_SYMBOLS)
SYM_TO_FILE = $(shell echo "$(ALL_SYMBOLS)" | sed -e 's|\.|_|g')
IOR_TARGETS = $(SYM_TO_FILE:%=$(MYDIR)/include/%_IOR.h)

ifneq ($(EXTERNAL_XML_SYMBOLS),)
   EXTERNAL_SYMBOLS_TARGETS = $(addprefix ., $(EXTERNAL_XML_SYMBOLS))
endif

# Create list of build targets (library names)
ifeq ($(INSTALL_TARGET),install)
    CLIENT_LANGUAGES = $(INSTALL_LANGUAGES)
endif # install target

BUILD_LIBS =$(foreach lang,$(CLIENT_LANGUAGES),$(shell $(UTILS_DIR)/getLibPath.sh client $(INSTALL_TARGET) $(CLIENT_TOP_DIR) $(lang) $(SIDL_SYMBOLS)))

INSTALL_DIRS = $(foreach sym,$(SIDL_SYMBOLS_TARGETS), \
  $(foreach lang,$(CLIENT_LANGUAGES), \
    $(CLIENT_TOP_DIR)/$(sym:.%=%)/$(lang) ))

# External
ifneq ($(EXTERNAL_XML_SYMBOLS),)
BUILD_LIBS +=$(foreach lang,$(CLIENT_LANGUAGES),$(shell $(UTILS_DIR)/getLibPath.sh client $(INSTALL_TARGET) $(CLIENT_TOP_DIR) $(lang) $(EXTERNAL_XML_SYMBOLS)))
INSTALL_DIRS += $(foreach sym,$(EXTERNAL_SYMBOLS_TARGETS), \
  $(foreach lang,$(filter python,$(CLIENT_LANGUAGES)), \
    $(sym:.%=%)/$(lang)/))
endif

#ifneq ($(CLASS_LIB_TARGETS),)
#  BUILD_TARGETS :=$(sort $(filter-out $(sort $(CLASS_LIB_TARGETS)),$(strip $(BUILD_LIBS))))
#else
  BUILD_TARGETS :=$(sort $(strip $(BUILD_LIBS)))
#endif

ifndef CLIENT_TARGET
	CLIENT_TARGET=all
endif

ifeq ($(MAKELEVEL),0)
    #PBUILD_FLAG=$(PMAKE_OPTS)
    # parallel builds currently don't work, will be fixed in future
    PBUILD_FLAG=
else
    PBUILD_FLAG=
endif

# Variables to export to submakes
export CLIENT_TOP_DIR
export SIDL_DIR
export LOCAL_PREFIX
export INSTALL_TARGET
export DEBUG
export INSTALL_LANGUAGES
export CLIENT_LANGUAGES

#==================================================================================================
# Top-level client (ports) directory targets
all: .msg $(BUILD_TARGETS) post-build-user

	
include $(UTILS_DIR)/make.rules.common 

check_top_dir:
	@if ! test "$(MYDIR)" = "$(CLIENT_TOP_DIR)"; then \
		echo "***Project directory has changed. Please run configure in the top-level project directory."; \
		if [ "x$(DEBUG)" != "x" ]; then echo "DEBUG: My directory is $(MYDIR), but CLIENT_TOP_DIR=$(CLIENT_TOP_DIR)."; fi; \
		exit 1; \
	fi

.msg: 
	@-$(RM) .output
	@-if [ "x$(QUIET)" = "x" ]; then echo " ## Building $(notdir $(CLIENT_TOP_DIR))... "; fi
		
$(BUILD_TARGETS): check_top_dir $(SIDL_FILES) pre-build-user
	$(HIDE_LIBTOOL)\
	dir=`dirname $@`; \
	if ! test -d $$dir ; then $(UTILS_DIR)/mkdirhier $$dir; fi; \
	dir=`echo $$dir | sed -e 's|/.install||'`; \
	relativedir=`echo $$dir | sed -e "s|$(CLIENT_TOP_DIR)/||"`; \
	clientname=`echo $$relativedir | sed -e 's|/.*||'`; tmpdir=`echo $$relativedir | sed -e 's|^[^/]*/||'`; \
	language=`echo $$tmpdir| sed -e 's|/.*||'`; \
	clientdir=$$clientname/$$language; \
	libname=$@; \
	if [ "x$(DEBUG)" != "x" ]; then echo ""; echo "DEBUG: libname=$$libname\nclientdir=$$clientdir\nclientname=$$clientname\nlanguage=$$language\nrelativedir=$$relativedir\n"; fi; \
	pwd=`pwd`; date=`date`; \
	iorfile="`echo $$clientname | sed -e 's|\.|_|g'`_IOR.h"; \
  	if ! test -d $(INSTALL_LIB_DIR) ; then $(UTILS_DIR)/mkdirhier $(INSTALL_LIB_DIR); fi; \
  	echo "# *** This file is automatically generated; do not edit. ***" > $$clientdir/Makefile; \
    echo "# File: $$clientdir/Makefile" >> $$clientdir/Makefile; \
    echo "# $$date" >> $$clientdir/Makefile; \
    echo "#-----------------------------------------------" >> $$clientdir/Makefile; \
    echo "include $(RELATIVE_TOP)/buildutils/make.client" >> $$clientdir/Makefile; \
    theoutput=""; \
    babelerror="0"; \
    outfile=.myoutput.$$clientname.$$language; \
	if [ "x$(DEBUG)" != "x" ]; then echo ""; echo "DEBUG: about to build $@"; fi; \
    if ! test -e "$$clientdir/babel.make" ; then \
    	if [ "x$(DEBUG)" != "x" ]; then echo ""; echo "$(MAKE) $(CCA_MAKEFLAGS) DEBUG=$(DEBUG) LANGUAGE=$$language -C $$clientdir CLIENT_NAME=$$clientname \
    		CLIENT_TOP_DIR=$(CLIENT_TOP_DIR) SIDL_DIR=$(SIDL_DIR) LOCAL_PREFIX=$(LOCAL_PREFIX) \
    		INSTALL_TARGET=$(INSTALL_TARGET) DEBUG=$(DEBUG) $(MYDIR)/$$clientdir/$$iorfile;"; \
    	fi; \
    	$(MAKE) $(CCA_MAKEFLAGS) LANGUAGE=$$language -C $$clientdir CLIENT_NAME=$$clientname \
    		CLIENT_TOP_DIR=$(CLIENT_TOP_DIR) SIDL_DIR=$(SIDL_DIR) LOCAL_PREFIX=$(LOCAL_PREFIX) \
    		INSTALL_TARGET=$(INSTALL_TARGET) DEBUG=$(DEBUG)  \
    		$(MYDIR)/$$clientdir/$$iorfile > $$outfile 2>&1 ; \
    	if test -e "$$clientdir/.babelretcode"; then \
    		babelerror=`cat $$clientdir/.babelretcode`; \
    	else \
    		babelerror="1"; \
    	fi; \
		if test "x$$babelerror" = "x1" ; then \
			if [ -f $$outfile ]; then \
				cat $$outfile; echo "Babel error -- check Babel output (above) for clues."; exit 1; \
			fi; \
		fi; \
		theoutput=`grep -v " is up to date" .myoutput.$$clientname.$$language`; \
		if test "xx$$theoutput" != "xx" -a "x$(QUIET)" = "x" ; then echo "$$theoutput"; fi; \
	fi; \
	if [ "x$(DEBUG)" != "x" ]; then \
		echo ""; echo "$(MAKE) $(CCA_MAKEFLAGS) LANGUAGE=$$language $(PBUILD_FLAG) -C $$clientdir CLIENT_NAME=$$clientname $$libname ;";\
	fi; \
	$(MAKE) $(CCA_MAKEFLAGS) LANGUAGE=$$language $(PBUILD_FLAG) -C $$clientdir CLIENT_NAME=$$clientname \
		$$libname > $$outfile 2>&1 ; \
	if [ -f $$outfile ]; then \
		theoutput=`grep -v " is up to date" $$outfile`; \
		if test "xx$$theoutput" != "xx" -a "x$(QUIET)" = "x" ; then echo "$$theoutput"; fi; \
		$(RM) $$outfile; \
	fi
	@if [ "x$(DEBUG)" != "x" ]; then echo "DEBUG: done building $@"; fi

post-build-user:: $(BUILD_TARGETS)

install-msg:
	@if [ "x$(BUILD_TARGETS)" != "x" ]; then \
		echo " ## make install in $(notdir $(CLIENT_TOP_DIR))/"; \
	fi
	
install: install-msg $(BUILD_TARGETS) $(INSTALL_DIRS)
	$(HIDE_LIBTOOL)$(MAKE) $(CCA_MAKEFLAGS) pre-install-user
	$(HIDE_LIBTOOL)(for i in $(INSTALL_DIRS) ; do \
		language=`basename $$i`; quiet=1; \
		$(MAKE) $(CCA_MAKEFLAGS) -C $$i LANGUAGE=$$language QUIET=$$quiet INSTALL_TARGET=$(INSTALL_TARGET) PARENT=$$PPID install; \
	done; \
	$(RM) $(DEPL_TOP_DIR)/.$$PPID.depl.*; )

	@if [ "x$(DEBUG)" != "x" ]; then echo "DEBUG: $(LIBTOOL) --mode=finish $(HIDE_COMPILE) $(INSTALL_LIB_DIR);"; fi;
	$(HIDE_LIBTOOL)if [ "x$(BUILD_TARGETS)" != "x" ]; then hidecompile=""; echo ""; else hidecompile="--quiet"; fi; \
	$(LIBTOOL) --mode=finish $$hidecompile $(INSTALL_LIB_DIR)
	$(HIDE_LIBTOOL)$(MAKE) $(CCA_MAKEFLAGS) post-install-user
	
	 
clean:
	@echo "#### make clean in $(notdir $(CLIENT_TOP_DIR))/..."
	$(HIDE_LIBTOOL)$(RM) -r $(SIDL_SYMBOLS) $(EXTERNAL_XML_SYMBOLS) 
	$(HIDE_LIBTOOL)$(MAKE) $(CCA_MAKEFLAGS) clean-user

distclean: clean
	- $(RM) -r .repository .sidl .lib .\#* *~ 
	$(HIDE_LIBTOOL)$(MAKE) $(CCA_MAKEFLAGS) distclean-user

.PHONY: check_top_dir .msg install-msg $(USER_TARGETS) $(USER_PHONY)

# Debugging targets
debug-external:
	@echo $(USE_MPI)
	@echo $(EXTERNAL_XML_SYMBOLS)
	@echo $(XML_REP)

debug:
	@echo "CLIENT_TOP_DIR=$(CLIENT_TOP_DIR)"
	@echo "CLIENT_LANGUAGES=$(CLIENT_LANGUAGES)"
	@echo "BABEL_INCLUDES=$(BABEL_INCLUDES)"
	@echo "INSTALL_DIRS=$(INSTALL_DIRS)"
	@echo "SIDL_SYMBOLS=$(SIDL_SYMBOLS)"
	@echo "SIDL_FILES=$(SIDL_FILES)"
	@echo "BUILD_TARGETS=$(BUILD_TARGETS)"
	@echo "INSTALL_TARGET=$(INSTALL)"
	@echo "MAKEFLAGS=$(MAKEFLAGS)"
	@echo "MAKECMDGOALS=$(MAKECMDGOALS)"

include $(CLIENT_TOP_DIR)/make.rules.user

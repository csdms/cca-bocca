# This file contains common rules for building SIDL-based
# multi-language applications, including CCA components. Prerequisites are 
# Babel and a recent version of the CCA tools. This file uses variables
# defined in make.server or make.client (which normally include this file), and
# make.vars.common, which is generated by configure from make.vars.common.in
#
# The directory organization follows the Bocca conventions: all client code is 
# generated in the ports subdirectory, while all implementations (server code) is 
# in the components directory. So all interfaces are in ports (whether they are 
# ports or not), and all classes (components or just classes) are in components/.
# Furthermore, all interface (and port) SIDL files are in ports/sidl/ and 
# all class (and component) SIDL files are in components/sidl/.
#
# This file should not normally be modified by users; if you encounter problems
# please email cca-help@cca-forum.org.


## *****************************************************************
## *      Object dependencies and compilation rules that are       *
## *      the same for client or server builds.                    *
## *****************************************************************

.SUFFIXES:
.SUFFIXES: .c .cxx .f .F90 .h .hxx .lo

# Object file dependencies
ifeq ($(LANGUAGE),java)
$(JAVA_OBJS) : $(JAVASRCS)
endif

ifeq ($(LANGUAGE),f90)
# Fortran dependencies (order of compilation matters!)
ifneq ($(F90IMPL_OBJS),)
$(addprefix $(MYDIR)/,$(F90IMPL_OBJS)): $(addprefix $(MYDIR)/,$(F90MOD_OBJS)) $(addprefix $(MYDIR)/,$(F90ARRAYMOD_OBJS))
endif
ifneq ($(F90ARRAYMOD_OBJS),)
$(addprefix $(MYDIR)/,$(F90ARRAYMOD_OBJS)): $(addprefix $(MYDIR)/,$(F90MOD_OBJS))
endif
$(addprefix $(MYDIR)/,$(F90MOD_OBJS)): $(addprefix $(MYDIR)/,$(F90STUB_OBJS))
$(addprefix $(MYDIR)/,$(F90STUB_OBJS)): $(addprefix $(MYDIR)/,$(F90TYPE_OBJS))
$(F90_OBJS): $(F90_SRCS)
endif
	
%.lo : %.c 
	$(HIDE_LIBTOOL)$(LIBTOOL) --mode=compile --tag=CXX $(HIDE_COMPILE) \
	$(CC) -g $(CFLAGS) \
		$(project_CFLAGS) $(components_CFLAGS) $(CFLAGS_USER) \
		$(ALL_INCLUDES) -c $< -o $(<:.c=.lo)

%.lo : %.cxx
	$(HIDE_LIBTOOL)$(LIBTOOL) --mode=compile --tag=CXX $(HIDE_COMPILE) \
	$(CXX) -g $(CXXFLAGS) \
		$(project_CXXFLAGS) $(components_CXXFLAGS) $(CXXFLAGS_USER) \
		$(ALL_INCLUDES) -c $< -o $(<:.cxx=.lo)

%.lo : %.f 
	$(HIDE_LIBTOOL)$(LIBTOOL) --mode=compile --tag=F77 $(HIDE_COMPILE) \
	$(F77) -g $(F77FLAGS) \
		$(project_F77FLAGS) $(components_F77FLAGS) $(F77FLAGS_USER) \
		$(ALL_INCLUDES) -c $< -o $(<:.f=.lo)

%.lo : %.F90 
	@-if test "x$(DEBUG)" != "x" ; then echo "DEBUG: Compiling $<"; fi
	@-cp $(@:.lo=.F90) $(@:.lo=.f90.$(TMP)) # for case-insensitive systems
	$(HIDE_LIBTOOL)$(CPP) -traditional-cpp -P -x c $(FPPFLAGS_USER) $(ALL_INCLUDES) -o $(@:.lo=.tmp) $< 
	@-sed -e 's/^#pragma.*$$//' < $(@:.lo=.tmp) > $(@:.lo=.f90)
	$(HIDE_LIBTOOL)$(LIBTOOL) --mode=compile --tag=FC $(HIDE_COMPILE) \
		$(F90) $(F90FLAGS) \
		$(project_F90FLAGS) $(components_F90FLAGS) $(F90FLAGS_USER) \
		$(ALL_INCLUDES) -c -o $@ $(@:.lo=.f90)
	$(HIDE_LIBTOOL)$(RM) $(@:.lo=.f90) $(@:.lo=.tmp)
	@-mv $(@:.lo=.f90.$(TMP)) $(@:.lo=.F90) # for case-insensitive systems
	
#-----------------------------------------------------------------------------------------
# Generate client code for any ports that this server library depends on and build the 
# the port libraries for the server's language. Note that the top-level ports Makefile 
# is using parallel builds when available, so no need to give the -j# option to make here.
ifneq ($(PORT_LIB_TARGETS),)
$(sort $(PORT_LIB_TARGETS)): $(PORT_SIDL_FILES)
	@if [ "x$(DEBUG)" != "x" ]; then \
        echo "   [-] building prerequisite port/interface client libraries: $(sort $(PORT_LIB_TARGETS))"; \
	    echo "   $(MAKE) $(CCA_MAKEFLAGS) -C $(PORT_TOP_DIR) QUIET=$(QUIET) DEBUG=$(DEBUG) SIDL_DIR=$(PORT_TOP_DIR)/sidl PORTS=\"$(sort $(INTERFACE_DEPS) $(PORT_SYMBOLS))\" CLIENT_TOP_DIR=$(PORT_TOP_DIR) INSTALL_TARGET=$(INSTALL_TARGET) $(PORT_LIB_TARGETS)"; \
    fi
	$(HIDE_LIBTOOL)$(MAKE) $(CCA_MAKEFLAGS) -C $(PORT_TOP_DIR) QUIET=$(QUIET) DEBUG=$(DEBUG) SIDL_DIR=$(PORT_TOP_DIR)/sidl \
		PORTS="$(sort $(INTERFACE_DEPS) $(PORT_SYMBOLS))" CLIENT_TOP_DIR=$(PORT_TOP_DIR) \
		INSTALL_TARGET=$(INSTALL_TARGET) $(PORT_LIB_TARGETS)  2>&1 | grep -v " is up to date" ;
endif

ifneq ($(EXT_LIB_TARGETS),)
$(sort $(EXT_LIB_TARGETS)): $(EXT_SIDL_FILES)
	@if [ "x$(DEBUG)" != "x" ]; then \
        echo "   [-] building prerequisite external client libraries: $(sort $(EXT_LIB_TARGETS))"; \
	    echo "   $(MAKE) $(CCA_MAKEFLAGS) -C $(EXTERNAL_TOP_DIR) QUIET=$(QUIET) DEBUG=$(DEBUG) SIDL_DIR=$(COMPONENT_TOP_DIR)/sidl CLIENT_TOP_DIR=$(EXTERNAL_TOP_DIR) SIDL_DIR=$(EXTERNAL_TOP_DIR)/sidl INSTALL_TARGET=$(INSTALL_TARGET) SIDL_FILES=$(EXT_SIDL_FILES) BUILD_TARGETS=$(EXT_LIB_TARGETS)" ; \
    fi
	$(HIDE_LIBTOOL)$(MAKE) $(CCA_MAKEFLAGS) -C $(EXTERNAL_TOP_DIR) QUIET=$(QUIET) DEBUG=$(DEBUG) SIDL_DIR=$(COMPONENT_TOP_DIR)/sidl\
		CLIENT_TOP_DIR=$(EXTERNAL_TOP_DIR) SIDL_DIR=$(EXTERNAL_TOP_DIR)/sidl INSTALL_TARGET=$(INSTALL_TARGET) \
		SIDL_FILES=$(EXT_SIDL_FILES) BUILD_TARGETS=$(EXT_LIB_TARGETS)  2>&1 | grep -v " is up to date" ; 
endif

ifneq ($(CLASS_LIB_TARGETS),)
$(sort $(CLASS_LIB_TARGETS)): $(CLASS_SIDL_FILES)
	@if [ "x$(DEBUG)" != "x" ]; then \
        echo "   [-] building prerequisite class/component client libraries: $(sort $(CLASS_LIB_TARGETS))"; \
	    echo "   $(MAKE) $(CCA_MAKEFLAGS) -C $(COMPONENT_CLIENTS_TOP_DIR) QUIET=$(QUIET) DEBUG=$(DEBUG) SIDL_DIR=$(COMPONENT_TOP_DIR)/sidl CLASSES=\"$(sort $(CLASS_DEPS) $(CLASS_SYMBOLS))\" CLIENT_TOP_DIR=$(COMPONENT_CLIENTS_TOP_DIR) SIDL_DIR=$(COMPONENT_TOP_DIR)/sidl INSTALL_TARGET=$(INSTALL_TARGET) $(CLASS_LIB_TARGETS)"; \
    fi
	$(HIDE_LIBTOOL)$(MAKE) $(CCA_MAKEFLAGS) -C $(COMPONENT_CLIENTS_TOP_DIR) QUIET=$(QUIET) DEBUG=$(DEBUG) SIDL_DIR=$(COMPONENT_TOP_DIR)/sidl \
		CLASSES="$(sort $(CLASS_DEPS) $(CLASS_SYMBOLS))" CLIENT_TOP_DIR=$(COMPONENT_CLIENTS_TOP_DIR) \
		SIDL_DIR=$(COMPONENT_TOP_DIR)/sidl INSTALL_TARGET=$(INSTALL_TARGET) $(CLASS_LIB_TARGETS) 2>&1 | grep -v " is up to date" ;
endif
	

